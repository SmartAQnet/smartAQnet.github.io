var elements = document.getElementsByTagName('script');

Array.prototype.forEach.call(elements, function (element) {
    if (element.type.indexOf('math/tex') !== -1) {
        // Extract math markdown
        var textToRender = element.innerText || element.textContent;

        // Kramdown and KaTeX workaround
        // https://github.com/rohanchandra/type-theme/issues/47
        textToRender = textToRender.replace(/%.*/g, '');

        // Create span for KaTeX
        var katexElement = document.createElement('span');

        // Support inline and display math
        if (element.type.indexOf('mode=display') !== -1) {
            katexElement.className += "math-display";
            textToRender = '\\displaystyle {' + textToRender + '}';
        } else {
            katexElement.className += "math-inline";
        }

        // Set displayMode to true to center equation
        // https://github.com/Khan/KaTeX/issues/626
        katex.render(textToRender, katexElement, {displayMode: false});
        element.parentNode.insertBefore(katexElement, element);
    }
});

window.userLanguage = window.localStorage.userLanguage || navigator.language || navigator.userLanguage || "en";
window.userLanguage = window.userLanguage.slice(0,2);
window.localStorage.userLanguage = window.userLanguage;
console.log(window.userLanguage);

window.setUserLanguage = function(langCode){
    window.userLanguage = langCode;
    window.localStorage.userLanguage = window.userLanguage;
    window.redirectToLanguage();
}

window.runIfSiteExists = function (newPath, callback){
    var http = new XMLHttpRequest();
    http.open('HEAD', newPath);
    http.onreadystatechange = function() {
        if (this.readyState == this.DONE && this.status == 200) {
            callback();
        }
    };
    http.send();
}

window.redirectToLanguage = function(){
    var langPath = window.location.pathname.match(/\/(?<lang>\w{2})(?<langAgnosticPath>\/.*)/);
    var newPath = "";
    if(langPath && langPath.groups.langAgnosticPath != "/"){
        newPath = "/" + window.userLanguage + 
            langPath.groups.langAgnosticPath + window.location.hash + window.location.search;
    }
    else if(window.userLanguage == "en"){
        newPath = "/";
    }
    else{
        newPath = "/" + window.userLanguage;
    }
    if(newPath != window.location.pathname && newPath + "/" != window.location.pathname){
        window.runIfSiteExists(newPath, function(){
            window.location.replace(newPath);
        })
    }
}

window.redirectToLanguage(window.userLanguage);
// init Masonry
try {
    var elem = document.querySelector('.grid');
    var msnry = new Masonry(elem, {
        itemSelector: '.grid-item',
        columnWidth: '.grid-sizer',
        gutter: '.gutter-sizer',
        percentPosition: true
    });

    // layout Masonry after each image loads
    var imgLoad = imagesLoaded(elem);
    imgLoad.on('progress', function (instance, image) {
        msnry.layout();
    });
} catch (err) {
    if (err instanceof ReferenceError) {
        // Do nothing, Masonry is defined only in the gallery page
    } else {
        throw err;
    }
}
